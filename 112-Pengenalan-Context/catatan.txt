Pengenalan Context
1. Context merupakan sebuah data yang membawa value, sinyal cancel, sinyal timeout dan sinyal deadline.
2. Context biasanya dibuat per request (misal setiap ada request masuk ke server web melalui http request).
3. Context digunakan untuk mempermudah kita meneruskan value, dan sinyal antar proses.

Kenapa Context Perlu Dipelajari?
1. Context di Go-Lang biasa digunakan untuk mengirim data request atau sinyal ke proses lain.
2. Dengan menggunakan context, ketika kita ingin membatalkan semua proses, kita cukup mengirim sinyal ke context, maka
secara otomatis semua proses akan dibatalkan.
3. Hampir semua bagian di Go-Lang memanfaatkan context, seperti database, http server, http client, dan lain-lain.
4. Bahkan di Google sendiri, ketika menggunakan Go-Lang, context wajib digunakan dan selalu dikirim ke setiap function
yang dikirim.

Cara Kerja Context
Terdapat 3 proses, yaitu Proses A, B, dan C. Proses A itu merupakan proses utama, lalu di proses A kita buat context,
saat membuat proses goroutine yang lain misal B dan C, maka context itu bisa dikirim ke goroutine atau proses yang lain.
Lalu ketika context itu dibatalkan dari Proses A, maka sinyalnya akan diterima oleh context yang lain yang ada pada
goroutine atau proses B dan C. Maka Proses B dan C itu akan bereaksi bahwa ternyata terdapat cancel dari context,
maka akan membatalkan proses yang ada pada B dan C. Sebenarnya jadi context itu hanya sebatas data saja, jadi context
yang dikirimkan oleh proses A lalu proses lain tinggal mendeteksi apakah prosesnya akan dibatalkan atau tidak.

Package Context
1. Context direpresentasikan di dalam sebuah interface Context.
2. Interface Context terdapat dalam package context.
3. https://golang.org/pkg/context/

Berikut adalah isi dari Interface Context
type Context interface {
    Deadline() (deadline time.Time, ok bool)

    Done() <-chan struct{}

    Err() error

    Value(key interface{}) interface{}
}
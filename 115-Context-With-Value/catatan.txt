Context With Value
1. Pada saat awal membuat context, context tidak memiliki value.
2. Kita bisa menambah sebuah value dengan data Pair (key-value) ke dalam context.
3. Saat kita menambah value ke context, secara otomatis akan tercipta child context baru, artinya original context nya
tidak akan berubah sama sekali.
4. Untuk membuat menambahkan value ke context, kita bisa menggunakan function
context.WithValue(parent, key, value).
Data ini merupakan interface kosong, jadi data tersebut bisa diisikan dengan tipe data apapun.

Kode : Context Get Value
func TestContextWithValue(t *testing.T) {
	contextA := context.Background()

	// context.WithValue(parent, key, value)

	// parent-nya contextA
	contextB := context.WithValue(contextA, "b", "B")
	contextC := context.WithValue(contextA, "c", "C")

	// parent-nya contextB
	contextD := context.WithValue(contextB, "d", "D")
	contextE := context.WithValue(contextB, "e", "E")

	// parent-nya contextC
	contextF := context.WithValue(contextC, "f", "F")

	// parent-nya contextF
	contextG := context.WithValue(contextF, "g", "G")

	// cetak data context
	fmt.Println(contextA)
	fmt.Println(contextB)
	fmt.Println(contextC)
	fmt.Println(contextD)
	fmt.Println(contextE)
	fmt.Println(contextF)
	fmt.Println(contextG)

	/**
	Output program
	=== RUN   TestContextWithValue
	context.Background
	context.Background.WithValue(type string, val B)
	context.Background.WithValue(type string, val C)
	context.Background.WithValue(type string, val B).WithValue(type string, val D)
	context.Background.WithValue(type string, val B).WithValue(type string, val E)
	context.Background.WithValue(type string, val C).WithValue(type string, val F)
	context.Background.WithValue(type string, val C).WithValue(type string, val F).WithValue(type string, val G)
	--- PASS: TestContextWithValue (0.00s)
	PASS
	*/

	/**
	Cara pengambilan value di context, yaitu dengan cara melihat context child terlebih dahulu apabila tidak ada maka
	akan melihat parent-nya yang paling tinggi. Kalau memang tidak ada berarti nilainya adalah nil.
	*/
	fmt.Println("\nContext Get Value")
	fmt.Println(contextF.Value("f")) // dapat
	fmt.Println(contextF.Value("c")) // dapat milik parent
	fmt.Println(contextF.Value("b")) // tidak dapat, beda parent
	fmt.Println(contextA.Value("b")) // tidak bisa mengambil data child, kenapa nil karena context itu menanyakannya ke atas, maka ketika dia tidak ada maka menanyakan ke parent, dia tidak mungkin menanyakan ke child-nya
	/**
	Output program
	Context Get Value
	F
	C
	<nil>
	<nil>

	Jadi value itu pasti menanyakannya itu ke parent-nya bukan ke child-nya
	*/
}